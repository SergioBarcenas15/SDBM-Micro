#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"

#define I2C_PORT i2c0
#define OLED_ADDR 0x3C
#define OLED_WIDTH 128
#define OLED_HEIGHT 64

#define OLED_CMD 0x00
#define OLED_DATA 0x40

// Matriz 8x8
uint8_t characters[][26] = {
{ 0x00,0xF8,0x44,0x44,0xFC,0x00,0x00,0x00 },{ 0x00,0xFC,0x94,0x94,0x68,0x00,0x00,0x00 },{ 0x00,0x78,0x84,0x84,0x84,0x00,0x00,0x00 },{ 0x00,0xFC,0x84,0x84,0x78,0x00,0x00,0x00 },{ 0x00,0xFC,0x94,0x94,0x84,0x00,0x00,0x00 },{ 0x00,0xFC,0x14,0x14,0x04,0x00,0x00,0x00 },{ 0x00,0x78,0x84,0x84,0xE4,0x00,0x00,0x00 },{ 0x00,0xFC,0x20,0x20,0xFC,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x80,0x80,0x7C,0x00,0x00,0x00 },{ 0x00,0xFC,0x30,0x48,0x84,0x00,0x00,0x00 },{ 0x00,0xFC,0x80,0x80,0x80,0x00,0x00,0x00 },{ 0x00,0xFC,0x04,0x18,0x04,0xFC,0x00,0x00 },{ 0x00,0xFC,0x10,0x20,0xFC,0x00,0x00,0x00 },{ 0x00,0x78,0x84,0x84,0x78,0x00,0x00,0x00 },{ 0x00,0x00,0xFC,0x24,0x24,0x18,0x00,0x00 },{ 0x00,0x78,0x84,0x84,0x78,0x00,0x00,0x00 },{ 0x00,0xFC,0x24,0x64,0x98,0x00,0x00,0x00 },{ 0x00,0x88,0x94,0x94,0x64,0x00,0x00,0x00 },{ 0x00,0x04,0x04,0xFC,0x04,0x04,0x00,0x00 },{ 0x00,0x7C,0x80,0x80,0xFC,0x00,0x00,0x00 },{ 0x00,0x3C,0xC0,0xC0,0x3C,0x00,0x00,0x00 },{ 0x00,0x7C,0x80,0xE0,0x80,0xFC,0x00,0x00 },{ 0x00,0xCC,0x30,0x30,0xCC,0x00,0x00,0x00 },{ 0x00,0x0C,0x10,0xE0,0x10,0x0C,0x00,0x00 },{ 0x00,0xC4,0xA4,0x94,0x8C,0x00,0x00,0x00 },};


// Caracteres en la tabla
enum { A = 0, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z };

// Activar I2C en el OLED
void oled_i2c_init() {
    i2c_init(I2C_PORT, 400 * 1000);
    gpio_set_function(4, GPIO_FUNC_I2C);
    gpio_set_function(5, GPIO_FUNC_I2C);
    gpio_pull_up(4);
    gpio_pull_up(5);
}

// Enviar al OLED
void oled_send_cmd(uint8_t cmd) {
    uint8_t data[2] = {OLED_CMD, cmd};
    i2c_write_blocking(I2C_PORT, OLED_ADDR, data, 2, false);
}

// Activar OLED
void oled_initialize() {
    uint8_t init_sequence[] = {
        0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40, 0x8D, 0x14,
        0x20, 0x00, 0xA1, 0xC8, 0xDA, 0x12, 0x81, 0xCF, 0xD9, 0xF1,
        0xDB, 0x40, 0xA4, 0xA6, 0xAF
    };
    for (int i = 0; i < sizeof(init_sequence); i++) {
        oled_send_cmd(init_sequence[i]);
    }
}

// Limpiar OLED
void oled_clear_display() {
    for (int page = 0; page < 8; page++) {
        oled_send_cmd(0xB0 + page);
        oled_send_cmd(0x00);
        oled_send_cmd(0x10);
        for (int col = 0; col < OLED_WIDTH; col++) {
            uint8_t data[2] = {OLED_DATA, 0x00};
            i2c_write_blocking(I2C_PORT, OLED_ADDR, data, 2, false);
        }
    }
}

// Escribir carácter en una posición
void oled_display_character(uint8_t page, uint8_t col, uint8_t char_index) {
    oled_send_cmd(0xB0 + page);
    oled_send_cmd(0x00 + (col & 0x0F));
    oled_send_cmd(0x10 + (col >> 4));
    for (int i = 0; i < 8; i++) {
        uint8_t data[2] = {OLED_DATA, characters[char_index][i]};
        i2c_write_blocking(I2C_PORT, OLED_ADDR, data, 2, false);
    }
}

// Imprimir texto en la pantalla OLED
void oled_display_text(uint8_t page, uint8_t start_col, uint8_t text[], int length) {
    for (int i = 0; i < length; i++) {
        oled_display_character(page, start_col + (i * 8), text[i]);
    }
}

int main() {
    stdio_init_all();
    oled_i2c_init();
    oled_initialize();
    oled_clear_display();

    //"SERGIO DANIEL" en la primera línea y "BARCENAS MEDINA" en la segunda
    uint8_t line1[] = {S, E, R, G, I, O, D, A, N, I, E, L};
    uint8_t line2[] = {B, A, R, C, E, N, A, S, M, E, D, I, N, A};

    oled_display_text(2, 0, line1, sizeof(line1));  // Primera línea
    oled_display_text(4, 0, line2, sizeof(line2));  // Segunda línea

    return 0;
}
